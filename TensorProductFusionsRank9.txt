#These are the only SRG families that give non-trivial fusions for the rank 9 tensor product scheme on a SRG #

We get 13 guaranteed fusions as mentioned in the Generalized Hamming Fusions...

gap> P:=k^0*[[1,k,l],[1,r,(-1-r)],[1,s,(-1-s)]];
[ [ 1, k, l ], [ 1, r, -r-1 ], [ 1, s, -s-1 ] ]
gap> P[3][2]:=Value(P[3][2],[s],[-k*(l-1-r)/((l+k)*r+k)]);
(-k*l+k*r+k)/(k*r+l*r+k)
gap> P[3][3]:=Value(P[3][3],[s],[-k*(l-1-r)/((l+k)*r+k)]);
(k*l-2*k*r-l*r-2*k)/(k*r+l*r+k)
gap> P;
[ [ 1, k, l ], [ 1, r, -r-1 ], [ 1, (-k*l+k*r+k)/(k*r+l*r+k), (k*l-2*k*r-l*r-2*k)/(k*r+l*r+k) ] ]
gap> P1:=KroneckerProduct(P,P);;
gap> P2:=TransposedMat(P1);;
gap> for Q in PartitionsSet([2..9]) do Q1:=UnionSet([[1]],Q);
> D:=[]; for i1 in [1..Length(Q1)] do D[i1]:=0*P2[1]; for j1 in [1..Length(Q1[i1])] do D[i1]:=D[i1]+P2[Q1[i1][j1]]; od; od;
> D2:=AsSet(TransposedMat(D)); if Length(D2)=Length(Q1) then Print(Q1,"\n"); fi; od;
[ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 7 ], [ 5, 8 ], [ 6, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4 ], [ 5, 6 ], [ 7 ], [ 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 7 ], [ 5, 6, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 4, 7 ], [ 5, 6, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 5, 6, 8, 9 ], [ 4 ], [ 7 ] ]
[ [ 1 ], [ 2, 3, 5, 6, 8, 9 ], [ 4, 7 ] ]
[ [ 1 ], [ 2, 4 ], [ 3, 7 ], [ 5 ], [ 6, 8 ], [ 9 ] ]
[ [ 1 ], [ 2, 5, 8 ], [ 3, 6, 9 ], [ 4 ], [ 7 ] ]
[ [ 1 ], [ 2, 5, 8 ], [ 3, 6, 9 ], [ 4, 7 ] ]
gap> quit;
# Let S={I,A,A'} be a symmetric rank 3 AS.  For a general S, the above 10 fusions of S \tensor S are guaranteed. 
#Assume C1=I \tensor I; C2=A \tensor I, C3=A' \tensor I, C4=I \tensor A 
#C5=A \tensor A; C6=A \tensor A', C7=I \tensor A', C8=A' \tensor A, C9=A' \tensor A'
# The fusion [ [ 1 ], [ 2, 4 ], [ 3, 7 ], [ 5 ], [ 6, 8 ], [ 9 ] ] represents Sym^2(S)=H(2,S).
# The fusions [ [ 1 ], [ 2, 5, 8 ], [ 3, 6, 9 ], [ 4 ], [ 7 ] ] and [ [ 1 ], [ 2 ], [ 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ] are 
# the two copies of the wreath product scheme S wr S.  In general, if S={A0,A1,...,Ad} and T={B0,B1,...Be} are ASs, S wr T is 
# the fusion of S \tensor T with elements Ai \otimes B0, i=0,1,...,d, and S^+ \tensor Bj, j=1,...,e.  The wreath product itself
# has fusions induced by the trivial fusion of S and the trivial fusion of T.
# The fusion [ [ 1 ], [ 2, 3, 4, 7 ], [ 5, 6, 8, 9 ] ] is the 'homogeneous fusion', where elements of the same 'degree' are fused -
# we calculate degree of a tensor by summing the degrees of its components, with degree I = 0 and degree A,A' = 1.  This will be 
# a fusion of Sym^2(A). 
# I have yet to make sense of the other maximal fusion [ [ 1 ], [ 2, 3 ], [ 4 ], [ 5, 6 ], [ 7 ], [ 8, 9 ] ].


################## Special case fusions for rank 9 Tensor Product scheme #############################

The graphs belonging to these families are discussed in detail in the Hamming Scheme article. We get additional fusions of the rank 9 scheme as shown below.
This result has been verified by analysing data/ruling out cases in the TensorProductScheme file.

####################### Co-spectral graphs, k=\ell=2(r+r^2)=2(s+s^2), r=-1-s ###########################


gap> P:=k^0*[[1,2*r+2*r*r,2*r+2*r*r],[1,r,(-1-r)],[1,-1-r,(r)]];;
gap> P1:=KroneckerProduct(P,P);;
gap> P2:=TransposedMat(P1);;
gap> for Q in PartitionsSet([2..9]) do Q1:=UnionSet([[1]],Q);
> D:=[]; for i1 in [1..Length(Q1)] do D[i1]:=0*P2[1]; for j1 in [1..Length(Q1[i1])] do D[i1]:=D[i1]+P2[Q1[i1][j1]]; od; od;
> D2:=AsSet(TransposedMat(D)); if Length(D2)=Length(Q1) then Print(Q1,"\n"); fi; od;
[ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 7 ], [ 5, 8 ], [ 6, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4 ], [ 5, 6 ], [ 7 ], [ 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 5, 7, 9 ], [ 6, 8 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 6, 7, 8 ], [ 5, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 7 ], [ 5, 6, 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 7 ], [ 5, 9 ], [ 6, 8 ] ]
[ [ 1 ], [ 2, 3, 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 4, 5, 7, 9 ], [ 6, 8 ] ]
[ [ 1 ], [ 2, 3, 4, 6, 7, 8 ], [ 5, 9 ] ]
[ [ 1 ], [ 2, 3, 4, 7 ], [ 5, 6, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 4, 7 ], [ 5, 9 ], [ 6, 8 ] ]
[ [ 1 ], [ 2, 3, 5, 6, 8, 9 ], [ 4 ], [ 7 ] ]
[ [ 1 ], [ 2, 3, 5, 6, 8, 9 ], [ 4, 7 ] ]
[ [ 1 ], [ 2, 3, 5, 9 ], [ 4, 6, 7, 8 ] ]
[ [ 1 ], [ 2, 3, 5, 9 ], [ 4, 7 ], [ 6, 8 ] ]
[ [ 1 ], [ 2, 3, 6, 8 ], [ 4, 5, 7, 9 ] ]
[ [ 1 ], [ 2, 3, 6, 8 ], [ 4, 7 ], [ 5, 9 ] ]
[ [ 1 ], [ 2, 4 ], [ 3, 7 ], [ 5 ], [ 6, 8 ], [ 9 ] ]
[ [ 1 ], [ 2, 5, 8 ], [ 3, 6, 9 ], [ 4 ], [ 7 ] ]
[ [ 1 ], [ 2, 5, 8 ], [ 3, 6, 9 ], [ 4, 7 ] ]
[ [ 1 ], [ 2, 7 ], [ 3, 4 ], [ 5, 9 ], [ 6 ], [ 8 ] ]


########################## Imprimitive graphs k=r, s=-1 ##########################
gap> m:=Indeterminate(Rationals,"m");
m
gap> P:=k^0*[[1,r,m*(1+r)],[1,r,(-1-r)],[1,-1,(0)]];
[ [ 1, r, r*m+m ], [ 1, r, -r-1 ], [ 1, -1, 0 ] ]
gap> P1:=KroneckerProduct(P,P);
[ [ 1, r, r*m+m, r, r^2, r^2*m+r*m, r*m+m, r^2*m+r*m, r^2*m^2+2*r*m^2+m^2 ], 
  [ 1, r, -r-1, r, r^2, -r^2-r, r*m+m, r^2*m+r*m, -r^2*m-2*r*m-m ], [ 1, -1, 0, r, -r, 0, r*m+m, -r*m-m, 0 ], 
  [ 1, r, r*m+m, r, r^2, r^2*m+r*m, -r-1, -r^2-r, -r^2*m-2*r*m-m ], 
  [ 1, r, -r-1, r, r^2, -r^2-r, -r-1, -r^2-r, r^2+2*r+1 ], [ 1, -1, 0, r, -r, 0, -r-1, r+1, 0 ], 
  [ 1, r, r*m+m, -1, -r, -r*m-m, 0, 0, 0 ], [ 1, r, -r-1, -1, -r, r+1, 0, 0, 0 ], [ 1, -1, 0, -1, 1, 0, 0, 0, 0 ] ]
gap> P2:=TransposedMat(P1);
[ [ 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ r, r, -1, r, r, -1, r, r, -1 ], [ r*m+m, -r-1, 0, r*m+m, -r-1, 0, r*m+m, -r-1, 0 ],
  [ r, r, r, r, r, r, -1, -1, -1 ], [ r^2, r^2, -r, r^2, r^2, -r, -r, -r, 1 ], 
  [ r^2*m+r*m, -r^2-r, 0, r^2*m+r*m, -r^2-r, 0, -r*m-m, r+1, 0 ], [ r*m+m, r*m+m, r*m+m, -r-1, -r-1, -r-1, 0, 0, 0 ], 
  [ r^2*m+r*m, r^2*m+r*m, -r*m-m, -r^2-r, -r^2-r, r+1, 0, 0, 0 ], 
  [ r^2*m^2+2*r*m^2+m^2, -r^2*m-2*r*m-m, 0, -r^2*m-2*r*m-m, r^2+2*r+1, 0, 0, 0, 0 ] ]
gap> for Q in PartitionsSet([2..9]) do Q1:=UnionSet([[1]],Q);
> D:=[]; for i1 in [1..Length(Q1)] do D[i1]:=0*P2[1]; for j1 in [1..Length(Q1[i1])] do D[i1]:=D[i1]+P2[Q1[i1][j1]]; od; od;
> D2:=AsSet(TransposedMat(D)); if Length(D2)=Length(Q1) then Print(Q1,"\n"); fi; od;
[ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7, 8 ], [ 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 5 ], [ 6 ], [ 7, 8 ], [ 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 5 ], [ 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 5, 7, 8 ], [ 6, 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 7 ], [ 5, 8 ], [ 6, 9 ] ]
[ [ 1 ], [ 2 ], [ 3, 4, 5, 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3, 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3, 6 ], [ 4 ], [ 5 ], [ 7 ], [ 8 ], [ 9 ] ]
[ [ 1 ], [ 2 ], [ 3, 6 ], [ 4 ], [ 5 ], [ 7, 8 ], [ 9 ] ]
[ [ 1 ], [ 2 ], [ 3, 6 ], [ 4 ], [ 5 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3, 6 ], [ 4, 5 ], [ 7, 8 ], [ 9 ] ]
[ [ 1 ], [ 2 ], [ 3, 6 ], [ 4, 5 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3, 6, 7, 8 ], [ 4 ], [ 5 ], [ 9 ] ]
[ [ 1 ], [ 2 ], [ 3, 6, 7, 8 ], [ 4, 5 ], [ 9 ] ]
[ [ 1 ], [ 2 ], [ 3, 6, 7, 8, 9 ], [ 4 ], [ 5 ] ]
[ [ 1 ], [ 2 ], [ 3, 6, 7, 8, 9 ], [ 4, 5 ] ]
[ [ 1 ], [ 2 ], [ 3, 6, 9 ], [ 4 ], [ 5 ], [ 7 ], [ 8 ] ]
[ [ 1 ], [ 2 ], [ 3, 6, 9 ], [ 4 ], [ 5 ], [ 7, 8 ] ]
[ [ 1 ], [ 2 ], [ 3, 6, 9 ], [ 4, 5 ], [ 7, 8 ] ]
[ [ 1 ], [ 2 ], [ 3, 6, 9 ], [ 4, 5, 7, 8 ] ]
[ [ 1 ], [ 2 ], [ 3, 6, 9 ], [ 4, 7 ], [ 5, 8 ] ]
[ [ 1 ], [ 2, 3 ], [ 4 ], [ 5, 6 ], [ 7 ], [ 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4 ], [ 5, 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 7 ], [ 5, 6, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 4, 5, 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 4, 7 ], [ 5, 6, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 5, 6 ], [ 4 ], [ 7 ], [ 8, 9 ] ]
[ [ 1 ], [ 2, 3, 5, 6 ], [ 4 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 5, 6, 7, 8, 9 ], [ 4 ] ]
[ [ 1 ], [ 2, 3, 5, 6, 8, 9 ], [ 4 ], [ 7 ] ]
[ [ 1 ], [ 2, 3, 5, 6, 8, 9 ], [ 4, 7 ] ]
[ [ 1 ], [ 2, 4 ], [ 3, 6 ], [ 5 ], [ 7, 8 ], [ 9 ] ]
[ [ 1 ], [ 2, 4 ], [ 3, 6 ], [ 5 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2, 4 ], [ 3, 6, 7, 8 ], [ 5 ], [ 9 ] ]
[ [ 1 ], [ 2, 4 ], [ 3, 6, 7, 8, 9 ], [ 5 ] ]
[ [ 1 ], [ 2, 4 ], [ 3, 6, 9 ], [ 5 ], [ 7, 8 ] ]
[ [ 1 ], [ 2, 4 ], [ 3, 7 ], [ 5 ], [ 6, 8 ], [ 9 ] ]
[ [ 1 ], [ 2, 4, 5 ], [ 3, 6 ], [ 7, 8 ], [ 9 ] ]
[ [ 1 ], [ 2, 4, 5 ], [ 3, 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2, 4, 5 ], [ 3, 6, 7, 8 ], [ 9 ] ]
[ [ 1 ], [ 2, 4, 5 ], [ 3, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2, 4, 5 ], [ 3, 6, 9 ], [ 7, 8 ] ]
[ [ 1 ], [ 2, 4, 5, 7, 8 ], [ 3, 6, 9 ] ]
[ [ 1 ], [ 2, 5 ], [ 3, 6 ], [ 4 ], [ 7 ], [ 8 ], [ 9 ] ]
[ [ 1 ], [ 2, 5 ], [ 3, 6 ], [ 4 ], [ 7, 8 ], [ 9 ] ]
[ [ 1 ], [ 2, 5 ], [ 3, 6 ], [ 4 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2, 5 ], [ 3, 6, 7, 8 ], [ 4 ], [ 9 ] ]
[ [ 1 ], [ 2, 5 ], [ 3, 6, 7, 8, 9 ], [ 4 ] ]
[ [ 1 ], [ 2, 5 ], [ 3, 6, 9 ], [ 4 ], [ 7 ], [ 8 ] ]
[ [ 1 ], [ 2, 5 ], [ 3, 6, 9 ], [ 4 ], [ 7, 8 ] ]
[ [ 1 ], [ 2, 5, 7, 8 ], [ 3, 6, 9 ], [ 4 ] ]
[ [ 1 ], [ 2, 5, 8 ], [ 3, 6, 9 ], [ 4 ], [ 7 ] ]
[ [ 1 ], [ 2, 5, 8 ], [ 3, 6, 9 ], [ 4, 7 ] ]

############################################# SRG family k-l=1+2r, r=-s ####################################

gap> P:=k^0*[[1,r*(2*r+1),(r-1)*(2*r+1)],[1,r,(-1-r)],[1,-r,(-1+r)]];;
gap> P1:=KroneckerProduct(P,P);;
gap> P2:=TransposedMat(P1);;
gap> for Q in PartitionsSet([2..9]) do Q1:=UnionSet([[1]],Q);
> D:=[]; for i1 in [1..Length(Q1)] do D[i1]:=0*P2[1]; for j1 in [1..Length(Q1[i1])] do D[i1]:=D[i1]+P2[Q1[i1][j1]]; od; od;
> D2:=AsSet(TransposedMat(D)); if Length(D2)=Length(Q1) then Print(Q1,"\n"); fi; od;
[ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 7 ], [ 5, 8 ], [ 6, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4 ], [ 5, 6 ], [ 7 ], [ 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 7 ], [ 5, 6, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 4, 7 ], [ 5, 6, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 5, 6, 8, 9 ], [ 4 ], [ 7 ] ]
[ [ 1 ], [ 2, 3, 5, 6, 8, 9 ], [ 4, 7 ] ]
[ [ 1 ], [ 2, 4 ], [ 3, 7 ], [ 5 ], [ 6, 8 ], [ 9 ] ]
[ [ 1 ], [ 2, 4, 6, 8 ], [ 3, 5, 7, 9 ] ]
[ [ 1 ], [ 2, 5, 8 ], [ 3, 6, 9 ], [ 4 ], [ 7 ] ]
[ [ 1 ], [ 2, 5, 8 ], [ 3, 6, 9 ], [ 4, 7 ] ]

################################################### SRG family with k=r(3+r), \ell=3+r, s=-2 #################################

gap> P:=k^0*[[1,r*(3+r),(3+r)],[1,r,(-1-r)],[1,-2,(1)]];;
gap> P1:=KroneckerProduct(P,P);;
gap> P2:=TransposedMat(P1);;
gap> for Q in PartitionsSet([2..9]) do Q1:=UnionSet([[1]],Q);
> D:=[]; for i1 in [1..Length(Q1)] do D[i1]:=0*P2[1]; for j1 in [1..Length(Q1[i1])] do D[i1]:=D[i1]+P2[Q1[i1][j1]]; od; od;
> D2:=AsSet(TransposedMat(D)); if Length(D2)=Length(Q1) then Print(Q1,"\n"); fi; od;
[ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 7 ], [ 5, 8 ], [ 6, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4 ], [ 5, 6 ], [ 7 ], [ 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 7 ], [ 5, 6, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 4, 7 ], [ 5, 6, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 5, 6, 8, 9 ], [ 4 ], [ 7 ] ]
[ [ 1 ], [ 2, 3, 5, 6, 8, 9 ], [ 4, 7 ] ]
[ [ 1 ], [ 2, 4 ], [ 3, 7 ], [ 5 ], [ 6, 8 ], [ 9 ] ]
[ [ 1 ], [ 2, 4, 9 ], [ 3, 5, 6, 7, 8 ] ]
[ [ 1 ], [ 2, 5, 8 ], [ 3, 6, 9 ], [ 4 ], [ 7 ] ]
[ [ 1 ], [ 2, 5, 8 ], [ 3, 6, 9 ], [ 4, 7 ] ]

############################## Special case of the above family k=\ell=4, r=1, s=-2 ###############3

gap> P:=k^0*[[1,4,4],[1,1,(-2)],[1,-2,(1)]];
[ [ 1, 4, 4 ], [ 1, 1, -2 ], [ 1, -2, 1 ] ]
gap> P1:=KroneckerProduct(P,P);
[ [ 1, 4, 4, 4, 16, 16, 4, 16, 16 ], [ 1, 1, -2, 4, 4, -8, 4, 4, -8 ], [ 1, -2, 1, 4, -8, 4, 4, -8, 4 ], 
  [ 1, 4, 4, 1, 4, 4, -2, -8, -8 ], [ 1, 1, -2, 1, 1, -2, -2, -2, 4 ], [ 1, -2, 1, 1, -2, 1, -2, 4, -2 ], 
  [ 1, 4, 4, -2, -8, -8, 1, 4, 4 ], [ 1, 1, -2, -2, -2, 4, 1, 1, -2 ], [ 1, -2, 1, -2, 4, -2, 1, -2, 1 ] ]
gap> P2:=TransposedMat(P1);
[ [ 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 4, 1, -2, 4, 1, -2, 4, 1, -2 ], [ 4, -2, 1, 4, -2, 1, 4, -2, 1 ], 
  [ 4, 4, 4, 1, 1, 1, -2, -2, -2 ], [ 16, 4, -8, 4, 1, -2, -8, -2, 4 ], [ 16, -8, 4, 4, -2, 1, -8, 4, -2 ], 
  [ 4, 4, 4, -2, -2, -2, 1, 1, 1 ], [ 16, 4, -8, -8, -2, 4, 4, 1, -2 ], [ 16, -8, 4, -8, 4, -2, 4, -2, 1 ] ]
gap> for Q in PartitionsSet([2..9]) do Q1:=UnionSet([[1]],Q);
> D:=[]; for i1 in [1..Length(Q1)] do D[i1]:=0*P2[1]; for j1 in [1..Length(Q1[i1])] do D[i1]:=D[i1]+P2[Q1[i1][j1]]; od; od;
> D2:=AsSet(TransposedMat(D)); if Length(D2)=Length(Q1) then Print(Q1,"\n"); fi; od;
[ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 7 ], [ 5, 8 ], [ 6, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4 ], [ 5, 6 ], [ 7 ], [ 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 5, 7, 9 ], [ 6, 8 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 6, 7, 8 ], [ 5, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 7 ], [ 5, 6, 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 7 ], [ 5, 9 ], [ 6, 8 ] ]
[ [ 1 ], [ 2, 3, 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 4, 5, 7, 9 ], [ 6, 8 ] ]
[ [ 1 ], [ 2, 3, 4, 6, 7, 8 ], [ 5, 9 ] ]
[ [ 1 ], [ 2, 3, 4, 7 ], [ 5, 6, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 4, 7 ], [ 5, 9 ], [ 6, 8 ] ]
[ [ 1 ], [ 2, 3, 5, 6, 8, 9 ], [ 4 ], [ 7 ] ]
[ [ 1 ], [ 2, 3, 5, 6, 8, 9 ], [ 4, 7 ] ]
[ [ 1 ], [ 2, 3, 5, 9 ], [ 4, 6, 7, 8 ] ]
[ [ 1 ], [ 2, 3, 5, 9 ], [ 4, 7 ], [ 6, 8 ] ]
[ [ 1 ], [ 2, 3, 6, 8 ], [ 4, 5, 7, 9 ] ]
[ [ 1 ], [ 2, 3, 6, 8 ], [ 4, 7 ], [ 5, 9 ] ]
[ [ 1 ], [ 2, 4 ], [ 3, 5, 7 ], [ 6, 8 ], [ 9 ] ]
[ [ 1 ], [ 2, 4 ], [ 3, 7 ], [ 5 ], [ 6, 8 ], [ 9 ] ]
[ [ 1 ], [ 2, 4, 6, 8, 9 ], [ 3, 5, 7 ] ]
[ [ 1 ], [ 2, 4, 9 ], [ 3, 5, 6, 7, 8 ] ]
[ [ 1 ], [ 2, 4, 9 ], [ 3, 5, 7 ], [ 6, 8 ] ]
[ [ 1 ], [ 2, 4, 9 ], [ 3, 7 ], [ 5 ], [ 6, 8 ] ]
[ [ 1 ], [ 2, 5, 6, 7, 9 ], [ 3, 4, 8 ] ]
[ [ 1 ], [ 2, 5, 8 ], [ 3, 6, 9 ], [ 4 ], [ 7 ] ]
[ [ 1 ], [ 2, 5, 8 ], [ 3, 6, 9 ], [ 4, 7 ] ]
[ [ 1 ], [ 2, 6, 7 ], [ 3, 4 ], [ 5, 9 ], [ 8 ] ]
[ [ 1 ], [ 2, 6, 7 ], [ 3, 4, 5, 8, 9 ] ]
[ [ 1 ], [ 2, 6, 7 ], [ 3, 4, 8 ], [ 5, 9 ] ]
[ [ 1 ], [ 2, 7 ], [ 3, 4 ], [ 5, 9 ], [ 6 ], [ 8 ] ]
[ [ 1 ], [ 2, 7 ], [ 3, 4, 8 ], [ 5, 9 ], [ 6 ] ]

################################## SRG family k=s^2, \ell=-2s, r=1 ############################

gap> P:=k^0*[[1,s*s,-2*s],[1,1,(-2)],[1,s,(-1-s)]];;
gap> P1:=KroneckerProduct(P,P);;
gap> P2:=TransposedMat(P1);;
gap> for Q in PartitionsSet([2..9]) do Q1:=UnionSet([[1]],Q);
> D:=[]; for i1 in [1..Length(Q1)] do D[i1]:=0*P2[1]; for j1 in [1..Length(Q1[i1])] do D[i1]:=D[i1]+P2[Q1[i1][j1]]; od; od;
> D2:=AsSet(TransposedMat(D)); if Length(D2)=Length(Q1) then Print(Q1,"\n"); fi; od;
[ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 7 ], [ 5, 8 ], [ 6, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4 ], [ 5, 6 ], [ 7 ], [ 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 7 ], [ 5, 6, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 4, 7 ], [ 5, 6, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 5, 6, 8, 9 ], [ 4 ], [ 7 ] ]
[ [ 1 ], [ 2, 3, 5, 6, 8, 9 ], [ 4, 7 ] ]
[ [ 1 ], [ 2, 4 ], [ 3, 7 ], [ 5 ], [ 6, 8 ], [ 9 ] ]
[ [ 1 ], [ 2, 4, 9 ], [ 3, 7 ], [ 5 ], [ 6, 8 ] ]
[ [ 1 ], [ 2, 5, 8 ], [ 3, 6, 9 ], [ 4 ], [ 7 ] ]
[ [ 1 ], [ 2, 5, 8 ], [ 3, 6, 9 ], [ 4, 7 ] ]

###################### Switch partner fusions of the above family ############################

gap> P:=k^0*[[1,2*(1+r),(1+r)^2],[1,1,(-2)],[1,-2,(1)]];;
gap> P1:=KroneckerProduct(P,P);;
gap> P2:=TransposedMat(P1);;
gap> for Q in PartitionsSet([2..9]) do Q1:=UnionSet([[1]],Q);
> D:=[]; for i1 in [1..Length(Q1)] do D[i1]:=0*P2[1]; for j1 in [1..Length(Q1[i1])] do D[i1]:=D[i1]+P2[Q1[i1][j1]]; od; od;
> D2:=AsSet(TransposedMat(D)); if Length(D2)=Length(Q1) then Print(Q1,"\n"); fi; od;
[ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 7 ], [ 5, 8 ], [ 6, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4 ], [ 5, 6 ], [ 7 ], [ 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 7 ], [ 5, 6, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 4, 7 ], [ 5, 6, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 5, 6, 8, 9 ], [ 4 ], [ 7 ] ]
[ [ 1 ], [ 2, 3, 5, 6, 8, 9 ], [ 4, 7 ] ]
[ [ 1 ], [ 2, 4 ], [ 3, 7 ], [ 5 ], [ 6, 8 ], [ 9 ] ]
[ [ 1 ], [ 2, 5, 8 ], [ 3, 6, 9 ], [ 4 ], [ 7 ] ]
[ [ 1 ], [ 2, 5, 8 ], [ 3, 6, 9 ], [ 4, 7 ] ]

############################ SRG family k=3-s-r, \ell=5+s+r #######################


gap> P:=k^0*[[1,3-s-r,5+s+r],[1,r,(-1-r)],[1,s,(-1-s)]];;                                                              
gap> P1:=KroneckerProduct(P,P);;
gap> P2:=TransposedMat(P1);;
gap> for Q in PartitionsSet([2..9]) do Q1:=UnionSet([[1]],Q);
> D:=[]; for i1 in [1..Length(Q1)] do D[i1]:=0*P2[1]; for j1 in [1..Length(Q1[i1])] do D[i1]:=D[i1]+P2[Q1[i1][j1]]; od; od;
> D2:=AsSet(TransposedMat(D)); if Length(D2)=Length(Q1) then Print(Q1,"\n"); fi; od;
[ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4, 7 ], [ 5, 8 ], [ 6, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4 ], [ 5, 6 ], [ 7 ], [ 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3 ], [ 4, 7 ], [ 5, 6, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 4, 5, 6, 7, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 4, 7 ], [ 5, 6, 8, 9 ] ]
[ [ 1 ], [ 2, 3, 5, 6, 8, 9 ], [ 4 ], [ 7 ] ]
[ [ 1 ], [ 2, 3, 5, 6, 8, 9 ], [ 4, 7 ] ]
[ [ 1 ], [ 2, 4 ], [ 3, 7 ], [ 5 ], [ 6, 8 ], [ 9 ] ]
[ [ 1 ], [ 2, 5, 8 ], [ 3, 6, 9 ], [ 4 ], [ 7 ] ]
[ [ 1 ], [ 2, 5, 8 ], [ 3, 6, 9 ], [ 4, 7 ] ]
 